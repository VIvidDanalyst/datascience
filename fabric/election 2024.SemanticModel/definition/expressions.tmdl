expression '2024 election' =
		let
		    Source = Csv.Document(File.Contents("D:\candidate-level-results-general-election-04-07-2024 (1).csv"),[Delimiter=",", Columns=54, Encoding=65001, QuoteStyle=QuoteStyle.None]),
		    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
		    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"Parliament number", Int64.Type}, {"Parliament summoned on", type date}, {"Parliament dissolved on", type text}, {"Parliament Wikidata ID", type text}, {"Parliament London Gazette citation", type text}, {"Parliament URL", type text}, {"General election polling date", type date}, {"General election is notional", type logical}, {"Total electorate in general election", Int64.Type}, {"Total valid votes in general election", Int64.Type}, {"Total invalid votes in general election", Int64.Type}, {"General election URL", type text}, {"Country name", type text}, {"Country geographic code", type text}, {"Country URL", type text}, {"English region name", type text}, {"English region geographic code", type text}, {"English region URL", type text}, {"Constituency name", type text}, {"Constituency geographic code", type text}, {"Constituency designation", type text}, {"Constituency URL", type text}, {"Boundary set start date", type date}, {"Boundary set end date", type text}, {"Boundary set URL", type text}, {"Electorate", Int64.Type}, {"Election polling date", type date}, {"Election is by-election", type logical}, {"Declaration time", type text}, {"Election valid vote count", Int64.Type}, {"Election invalid vote count", Int64.Type}, {"Election URL", type text}, {"Election result summary", type text}, {"Candidate family name", type text}, {"Candidate given name", type text}, {"Candidate MNIS ID", Int64.Type}, {"Candidate is sitting MP", type logical}, {"Candidate is former MP", type logical}, {"Candidate Member URL", type text}, {"Main party name", type text}, {"Main party abbreviation", type text}, {"Main party Electoral Commission ID", type text}, {"Main party MNIS ID", Int64.Type}, {"Main party URL", type text}, {"Adjunct party name", type text}, {"Adjunct party abbreviation", type text}, {"Adjunct party Electoral Commission ID", type text}, {"Candidate is standing as Commons Speaker", type logical}, {"Candidate is standing as independent", type logical}, {"Candidate vote count", Int64.Type}, {"Candidate vote share", type number}, {"Candidate vote change", type number}, {"Majority", Int64.Type}, {"Candidate result position", Int64.Type}}),
		    #"Removed Other Columns" = Table.SelectColumns(#"Changed Type",{"Parliament number", "Parliament summoned on", "Parliament dissolved on", "General election polling date", "General election is notional", "Total electorate in general election", "Total valid votes in general election", "Total invalid votes in general election", "Country name", "Country geographic code", "Country URL", "English region name", "English region geographic code", "Constituency name", "Constituency geographic code", "Constituency designation", "Constituency URL", "Electorate", "Election polling date", "Election is by-election", "Declaration time", "Election valid vote count", "Election invalid vote count", "Election URL", "Election result summary", "Candidate family name", "Candidate given name", "Candidate MNIS ID", "Candidate is sitting MP", "Candidate is former MP", "Candidate Member URL", "Main party name", "Main party abbreviation", "Main party URL", "Adjunct party name", "Adjunct party abbreviation", "Adjunct party Electoral Commission ID", "Candidate is standing as Commons Speaker", "Candidate is standing as independent", "Candidate vote count", "Candidate vote share", "Candidate vote change", "Majority", "Candidate result position"}),
		    #"Removed Other Columns1" = Table.SelectColumns(#"Removed Other Columns",{"Country name", "Country geographic code", "English region name", "Constituency name", "Constituency geographic code", "Constituency designation", "Candidate family name", "Candidate given name", "Candidate is sitting MP", "Candidate is former MP", "Main party name", "Main party abbreviation", "Candidate is standing as Commons Speaker", "Candidate is standing as independent", "Candidate vote count", "Candidate vote share", "Candidate vote change", "Majority", "Candidate result position"})
		in
		    #"Removed Other Columns1"
	lineageTag: 66c34dc9-a173-43ec-9507-77e2e141944f

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression candidate-level-results-general-election-12-12-2019 =
		let
		    Source = Csv.Document(File.Contents("D:\candidate-level-results-general-election-12-12-2019.csv"),[Delimiter=",", Columns=54, Encoding=1252, QuoteStyle=QuoteStyle.None]),
		    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
		    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"Parliament number", Int64.Type}, {"Parliament summoned on", type date}, {"Parliament dissolved on", type date}, {"Parliament Wikidata ID", type text}, {"Parliament London Gazette citation", type text}, {"Parliament URL", type text}, {"General election polling date", type date}, {"General election is notional", type logical}, {"Total electorate in general election", Int64.Type}, {"Total valid votes in general election", Int64.Type}, {"Total invalid votes in general election", Int64.Type}, {"General election URL", type text}, {"Country name", type text}, {"Country geographic code", type text}, {"Country URL", type text}, {"English region name", type text}, {"English region geographic code", type text}, {"English region URL", type text}, {"Constituency name", type text}, {"Constituency geographic code", type text}, {"Constituency designation", type text}, {"Constituency URL", type text}, {"Boundary set start date", type date}, {"Boundary set end date", type date}, {"Boundary set URL", type text}, {"Electorate", Int64.Type}, {"Election polling date", type date}, {"Election is by-election", type logical}, {"Declaration time", type text}, {"Election valid vote count", Int64.Type}, {"Election invalid vote count", Int64.Type}, {"Election URL", type text}, {"Election result summary", type text}, {"Candidate family name", type text}, {"Candidate given name", type text}, {"Candidate MNIS ID", Int64.Type}, {"Candidate is sitting MP", type logical}, {"Candidate is former MP", type logical}, {"Candidate Member URL", type text}, {"Main party name", type text}, {"Main party abbreviation", type text}, {"Main party Electoral Commission ID", type text}, {"Main party MNIS ID", Int64.Type}, {"Main party URL", type text}, {"Adjunct party name", type text}, {"Adjunct party abbreviation", type text}, {"Adjunct party Electoral Commission ID", type text}, {"Candidate is standing as Commons Speaker", type logical}, {"Candidate is standing as independent", type logical}, {"Candidate vote count", Int64.Type}, {"Candidate vote share", type number}, {"Candidate vote change", type number}, {"Majority", Int64.Type}, {"Candidate result position", Int64.Type}}),
		    #"Filtered Rows" = Table.SelectRows(#"Changed Type", each ([Constituency name] = "Bolton North East" or [Constituency name] = "Bolton South East" or [Constituency name] = "Bolton West"))
		in
		    #"Filtered Rows"
	lineageTag: 592355d6-400a-4e8b-b5b3-380f0418143f

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

